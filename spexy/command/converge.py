from importlib.machinery import SourceFileLoader
import os
import glob


def sim_save(source, dest):
    sim = SourceFileLoader('_', str(source)).load_module().sim()
    sim.write(dest, 1)


def plt_save(sim_source, data_source, plot_source, fig, dest):
    sim = SourceFileLoader('_', str(sim_source)).load_module().sim(data_source)
    plot = SourceFileLoader('_', str(plot_source)).load_module().plot
    figs = plot(sim)
    f = getattr(figs, fig)

    import matplotlib.pyplot as plt
    plt.figure()
    ax = plt.subplot(1, 1, 1)
    f(ax)
    plt.savefig(str(dest))


def gen_makefile():
    print('# This Makefile is autogenerated. Do not edit.\n')
    dname = 'dec/sim/converge'
    for s in sorted(glob.glob(os.path.join(dname, '**/sim.py'), recursive=True)):
        print(
            "SIM_SOURCES += {} \n".format(s),
            end=''
        )
        root, _ = s.rsplit('/sim.py')
        print(
            (
                "SIM_RESULTS += {root}/sim.hdf5 \n"
                "{root}/sim.hdf5: {root}/sim.py \n"
                "\t$(MPLPY) -m spexy.sim.converge sim-save $< $@ \n"
            ).format(root=root)
        )
    for s in sorted(glob.glob(os.path.join(dname, '**/plt.py'), recursive=True)):
        print(
            "SIM_SOURCES += {} \n".format(s),
            end=''
        )
        root, _ = s.rsplit('/plt.py')
        Figs = SourceFileLoader('_', str(s)).load_module().Figs
        for fig in Figs._fields:
            print(
                (
                    "SIM_RESULTS += {root}/{fig}.png \n"
                    "{root}/{fig}.png: {root}/plt.py {root}/sim.hdf5 {root}/sim.py \n"
                    "\t$(MPLPY) -m spexy.command.converge plt-save {root}/sim.py {root}/sim.hdf5 {root}/plt.py {fig} {root}/{fig}.png \n"

                ).format(root=root, fig=fig)
            )


if __name__ == '__main__':
    import argh

    parser = argh.ArghParser()
    parser.add_commands([
        sim_save, plt_save, gen_makefile,
    ])
    parser.dispatch()
